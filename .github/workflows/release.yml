name: Publish Release

on:
  # push:
  #   branches:
  #     - release # Trigger on pushes to the 'release' branch
  #     - main    # Trigger on pushes to the 'main' branch

  # This is not working.. 
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"         # Matches x.x.x (e.g., 1.0.0)
      - "[0-9]+.[0-9]+.[0-9]+-rc[0-9]+"  # Matches x.x.x-rcX (e.g., 1.0.0-rc1)
      # - "[0-9]+.[0-9]+.[0-9]+-dev[0-9]+" # Matches x.x.x-devX (e.g., 1.0.0-dev1)
  
  workflow_dispatch: # Allow manual triggering of the workflow

env:
  PACKAGE_NAME: "rds-tunnel"
  OWNER: "sbekx"
  # TAP_NAME: "<TAP_NAME>" 

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI and validate version
        env:
          TAG_NAME: ${{ needs.details.outputs.tag_name }}
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
        run: |
          # Get the full version from the tag
          FULL_VERSION="$TAG_NAME"
          
          # Check if the tag is a release candidate
          if [[ "$FULL_VERSION" == *"-rc"* ]]; then
            # Extract the base version (e.g., 1.0.0 from 1.0.0-rc1)
            BASE_VERSION=$(echo "$FULL_VERSION" | awk -F'-' '{print $1}')
            echo "This is a release candidate: $FULL_VERSION"
            echo "Checking for final version: $BASE_VERSION on PyPI"

            # Check if the base version already exists on PyPI
            response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/$BASE_VERSION/json || echo "{}")
            if [ "$(echo "$response" | jq --raw-output "select(.info != null) | .info.version")" == "$BASE_VERSION" ]; then
              echo "Error: A final release for $BASE_VERSION already exists on PyPI."
              echo "Cannot publish a release candidate ($FULL_VERSION) after the final release."
              exit 1
            else
              echo "No final release found for $BASE_VERSION. Proceeding with RC upload."
            fi
          # else
          #   echo "This is a final release: $FULL_VERSION"
          #   echo "Proceeding with standard version check and upload."
            
          #   # This is your original version comparison for final releases
          #   response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json || echo "{}")
          #   LATEST_PYPI_VERSION=$(echo $response | jq --raw-output "select(.info != null) | .info.version")
            
          #   if [ -z "$LATEST_PYPI_VERSION" ] || [ "$(printf '%s\n' "$LATEST_PYPI_VERSION" "$FULL_VERSION" | sort -V | head -n 1)" != "$FULL_VERSION" ]; then
          #     echo "Error: The new version '$FULL_VERSION' is not a new version on PyPI."
          #     exit 1
          #   fi
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set project version with uv
        run: |
          uv version ${{ needs.details.outputs.tag_name }}

      - name: Build source and wheel distribution
        run: |
          uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes

  # bump_homebrew_formula:
  #   name: Dispatch event to Repo B
  #   needs: [details, github_release, pypi_publish]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: release
  #   steps:
  #     - name: Dispatch Repository Dispatch event
  #       uses: peter-evans/repository-dispatch@v2
  #       with:
  #         token: ${{ secrets.BREW_TAP_TOKEN }}
  #         repository: ${{ env.OWNER }}/{{ env.TAP_NAME }}
  #         event-type: "update-formula"
  #         client-payload: |-
  #           { 
  #             "formula_version": "${{env.FORMULA_VERSION}}", 
  #             "formula_url": "${{ env.FORMULA_URL }}", 
  #             "formula_name": "${{ env.FORMULA_NAME }}"
  #           }
  #       env:
  #         FORMULA_VERSION: ${{ needs.details.outputs.new_version }}
  #         FORMULA_NAME: ${{ env.PACKAGE_NAME }}
  #         FORMULA_URL: https://github.com/${{env.OWNER}}/${{env.PACKAGE_NAME}}/releases/download/${{ needs.details.outputs.new_version }}/${{env.PACKAGE_NAME}}-${{ needs.details.outputs.new_version }}.tar.gz
